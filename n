import json

def process(input_data):
    circuit1_data = input_data.get('circuit1', {})
    circuit2_data = input_data.get('circuit2', {})
    
    all_keys = set(circuit1_data.keys()) | set(circuit2_data.keys())
    result = {}

    for pin_name in all_keys:
        pin_data_c1 = circuit1_data.get(pin_name, [])
        pin_data_c2 = circuit2_data.get(pin_name, [])

        nets = {}

        for data_list, index in [(pin_data_c1, 1), (pin_data_c2, 0)]:
            for item in data_list:
                if isinstance(item, list):
                    net_name, net_value, _ = item
                    if net_name not in nets:
                        nets[net_name] = ["0", "0"]
                    nets[net_name][index] = net_value
        
        pin_value_circuit1 = "0"
        pin_value_circuit2 = "0"

        if isinstance(pin_data_c1[-1], int):
            pin_value_circuit1 = str(pin_data_c1[-1])
        
        if isinstance(pin_data_c2[-1], int):
            pin_value_circuit2 = str(pin_data_c2[-1])
        
       
        if len(pin_data_c1) == 1 and isinstance(pin_data_c1[0], list):
            net_name, net_value, _ = pin_data_c1[0]
            nets[net_name] = ["0", net_value]
            
        if len(pin_data_c2) == 1 and isinstance(pin_data_c2[0], list):
            net_name, net_value, _ = pin_data_c2[0]
            nets[net_name] = [net_value, "0"]

        result[pin_name] = [f"{pin_name}({pin_value_circuit2})", f"{pin_name}({pin_value_circuit1})", nets]

    return result

def generate_json_output(processed_data):
    output = {"pins": processed_data}

    with open("output_pins.json", "w") as outfile:
        json.dump(output, outfile, indent=4)
if __name__ == "__main__":
    data = {'circuit1': {'Y': [['sky130_fd_pr__nfet_01v8', 'drain|source', 1], ['sky130_fd_pr__pfet_01v8_hvt', 'drain|source', 1], 3], 'A': [['sky130_fd_pr__nfet_01v8', 'gate', 1], ['sky130_fd_pr__pfet_01v8_hvt', 'gate', 1], 3]}, 'circuit2': {'A': [['sky130_fd_pr__nfet_01v8', '2', 1], ['sky130_fd_pr__pfet_01v8_hvt', '2', 1], 3], 'Y': [['sky130_fd_pr__nfet_01v8', '1|3', 1], ['sky130_fd_pr__pfet_01v8_hvt', '1|3', 1], 3]}, 'circuit3': {'dummy_14': [['sky130_fd_pr__pfet_01v8_hvt', 'proxy4', 1]], 'dummy_13': [['sky130_fd_pr__pfet_01v8_hvt', 'proxy3', 1]], 'dummy_12': [['sky130_fd_pr__pfet_01v8_hvt', 'proxy2', 1]], 'dummy_11': [['sky130_fd_pr__pfet_01v8_hvt', 'proxy1', 1]], 'dummy_10': [['sky130_fd_pr__nfet_01v8', 'proxy4', 1]], 'dummy_9': [['sky130_fd_pr__nfet_01v8', 'proxy3', 1]], 'dummy_8': [['sky130_fd_pr__nfet_01v8', 'proxy2', 1]], 'dummy_7': [['sky130_fd_pr__nfet_01v8', 'proxy1', 1]], 'VPB': [['sky130_fd_pr__pfet_01v8_hvt', 'bulk', 1], 2], 'VPWR': [['sky130_fd_pr__pfet_01v8_hvt', 'drain|source', 1], 2], 'VNB': [['sky130_fd_pr__nfet_01v8', 'bulk', 1], 2], 'VGND': [['sky130_fd_pr__nfet_01v8', 'drain|source', 1], 2]}, 'circuit4': {'dummy_14': [['sky130_fd_pr__pfet_01v8_hvt', 'proxybulk', 1]], 'dummy_13': [['sky130_fd_pr__pfet_01v8_hvt', 'proxysource', 1]], 'dummy_12': [['sky130_fd_pr__pfet_01v8_hvt', 'proxygate', 1]], 'dummy_11': [['sky130_fd_pr__pfet_01v8_hvt', 'proxydrain', 1]], 'dummy_10': [['sky130_fd_pr__nfet_01v8', 'proxybulk', 1]], 'dummy_9': [['sky130_fd_pr__nfet_01v8', 'proxysource', 1]], 'dummy_8': [['sky130_fd_pr__nfet_01v8', 'proxygate', 1]], 'dummy_7': [['sky130_fd_pr__nfet_01v8', 'proxydrain', 1]], 'VPB': [['sky130_fd_pr__pfet_01v8_hvt', '4', 1], 2], 'VPWR': [['sky130_fd_pr__pfet_01v8_hvt', '1|3', 1], 2], 'VNB': [['sky130_fd_pr__nfet_01v8', '4', 1], 2], 'VGND': [['sky130_fd_pr__nfet_01v8', '1|3', 1], 2]}}
    processed_data = process(data)
    
    generate_json_output(processed_data)

